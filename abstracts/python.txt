Sites:
    codewars
    Exercism
    HackerRANK
    GRASSHOPPER
    py.checkio.org

python(""); - Escreve no terminal
type() - Dizer o tipo de valor

----------/Operadores Aritméticos\----------
+  - Adiçõa
-  - Subtração
*  - Multiplicação
/  - Divisão
** - Exponenciação
%  - Resto
// - Divisão descartando a parte fracionária

----------/Operadores Bitwise\----------
Referência: https://wiki.python.org/moin/BitwiseOperators
x << y
x >> y
x & y
x | y
~ x
x ^ y

----------/Operadores Relacionais\----------
==  - Igualdade
!=  - Diferente
>   - Maior
<   - Menor
>=  - Maior ou Igual
<=  - Menor ou Igual

----------/Ordem das operações\----------
()
**
* /
+ -

----------/String e Operações\----------
+ -  Concatena váriaveis e textos
* - Repete váriaveis e textos

----------/String e Operações\----------
# - Tudo após a serquilha é comentário até o fim da linha

----------/Depuração\----------
Erro de sintaxe:
A “sintaxe” refere-se à estrutura de um programa e suas respectivas regras. Por exemplo, os parênteses devem vir em pares correspondentes, então (1 + 2) é legal, mas 8) é um erro de sintaxe.

Erro de tempo de execuçãoa:
O segundo tipo de erro é o erro de tempo de execução, assim chamado porque o erro não aparece até que o programa seja executado.

Erro semântico:
O erro é “semântico”, ou seja, relacionado ao significado. Se houver um erro semântico no seu programa, ele será executado sem gerar mensagens de erro, mas não vai fazer a coisa certa.

----------/Notação por ponto\----------
O objeto de módulo contém as funções e variáveis definidas no módulo. Para acessar uma das funções, é preciso especificar o nome do módulo e o nome da função, separados por um ponto. Este formato é chamado de notação de ponto.

----------/Funções\----------
def - palavra-chave que indica uma definição de função. 
Nomenclatura da função: 
    Não ter uma função com o mesmo nome
    Não usar palavras-chaves (palavras reservadas)
    letras, números e sublinhado são legais, mas o primeiro caractere não pode ser um número.
Regras: 
    As Instruções precisam ser intendadas para fazer parte da função
    Todas as aspas (simples e duplas) devem ser “aspas retas”, normalmente encontradas ao lado do Enter no teclado.
    Para terminar uma função é preciso ter uma linha em branco
    A definição de função tem que ser executada antes que a função seja chamada.
def nome_funcao(parametro_1, parametro_2, ..., parametro_n):    - Cabeçalho da função, o resto é o corpo
    n = 1       - Instrução 1
    print(n)    - Instrução 2

----------/Funções com retorno\----------
As funções com retorno, retornam um resultado como final de sua execução através do 'return'.

----------/Funções nulas\----------
As funções vazias não retornam nada.

----------/Variáveis\----------
Variável local - Variáveis criadas dentro de estruturas podem ser usadas dentro da estrutura onde foi criado

----------/Parâmetros\----------
Parâmetro local - Parâmetros criados dentro de estruturas podem ser usadas dentro da estrutura onde foi criado

----------/Expressões booleanas\----------
    Qualquer número que não seja zero é interpretado como True
    Operadores:
        and - Operado lógico de
        or - Operado lógico de
        not - Operado lógico de negação

----------/Estrutura condicional\----------
if 'condição':
    'comandos a ser executado caso seja verdadeiro'
    pass - não faz nada, caso você precise deixar uma estrutura em branco

Estrutura condicional alternativa:
if 'condição':
    'comandos a ser executado caso seja verdadeiro'
else:
    'comandos a ser executado caso seja falso'

Estrutura condicional encadeada/if encadeado:
if 'condição':
    'comandos a ser executado caso essa seja verdadeiro'
eleif:
    'comandos a ser executado caso essa seja verdadeiro'

Estrutura condicional aninhada:
if 'condição':
    'comandos'
    if 'condição':
        'comandos'
    eleif:
        'comandos'
eleif:
    'comandos'

----------/Strings\----------
    Uma string é uma váriavel com uma sequência de caracteres
    Strings são imutáveis, portanto, para aterar uma string, é preciso criar umar nova
    Atribuição/Syntax
        fruit = 'Texto'
    Acesso/Syntax
        letra = feuit[0...n]
        Fatiamento
            fruit[:n] = do inicio até n 
            fruit[n:] = de n até o final 
    Métodos
        len() = devolve o tamanho da string
        upper() = devolve a string com todas as letras maiúsculas
        find('string', inicio, fim) = retorna o indice do caractere que você mandou procurar, caso haja. Ele também consegue encontrar substring. 
            inicio = indica de onde deve começar a procura
            fim = indica de onde deve terminar a procura
        in = retorna valor boolean caso a string a esteja na string b
        capitalize() = retorna a string com a primeira letra em maiúsculas


----------/Recursividade\----------
É ato de chamar uma função em si mesmo

----------/Input\-----------
A função 'input()' permite que o usuário digite algo, você pode passar uma mensagem como parâmetro
\n = indica ao python para quebrar a linha

----------/Depuração\-----------
Úteis:
    Que tipo de erro foi
    Onde ocorreu

----------/Retorno\-----------
Algo que retorna da função que você chama