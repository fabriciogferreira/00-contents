As CSS (Cascading Style Sheets, em português, Folhas de estilo em cascata) cuida do estilo da página, ela consegue alterar as propriedades das tag's do html.

Enquanto o HTML cuida da estrutura, semântica e conteúdo. As CSS cuidam do estilo da página, alterando, cores, formatos, tamanhos, comportamento e outros.

Para se alterar as propriedades das tag's, utilizamos as "Declarações", elas são compostas por propriedade e o valor, respectivamento, o que você quer alterar e valor que essa alteração vai receber.

Por exemplo, caso você queira alterar a cor das letras para vermelho de uma tag que possui o conteúdo em letras, você utiliza a propriedade 'color' e o valor 'red'.

A forma como é feita depende de como você está utilizando a CSS e as versões das tecnologias, iremos mostrar as diversas formas conforme o texto decorre.

Existem três formas de alterar as propriedades das tag's, a primeira é 'CSS em linha' ou 'CSS na linha', a segunda é CSS em bloco e por fim, a CSS Externo. A primeira e a segunda forma são CSS Interno, além de que, eles devem ficar dentro da tag ou parâmetro (depende de qual forma você está usando) 'style', para indicar que aquilo lá dentro é CSS.

Já segunda e na terceira forma, é preciso indicar os seletores, ele servem para selecionar um grupo ou uma tag específica do do seu arquivo HTML.

As três formas possui vantagens e desvantagens, elas são classificados em ordem de aplicação e alcançe

                Ordem       | Alcançe
CSS Externo     Primeiro    | Qualquer arquivo ligado a ele
CSS em bloco    Segundo     | Apenas no arquivo que ele está
CSS em linha    Terceiro    | Apenas na tag em que ele está

O exemplo que vamos utilizar, é a alteração de cor do conteúdo da tag 'h1'.

Na CSS em linha, isso é feito dentro da tag de abertura, veja:

<h1 style=" color: red; ">Seja bem vindo ao meu site</h1>

A cor vermelha só seria aplicada apenas ao conteúdo desta tag, mesmo que você tenha outra tag's h1.

Já para a CSS em bloco, ficaria da seguinte forma, ele tem que ficar dentro da tag 'head':

<style>
    h1{
        color: red;
    }
</style>

Como dito anteriormente, essa forma possui um alcançe maior que a CSS em linha, nesse caso, se você tiver mais de um par de tag's 'h1', a cor vermelha seria aplicada a todas, desde que não tenha uma tag com CSS em linha mudando a cor do conteúdo.

Por fim, a terceira e última forma, a que possui o maior alcançe, para utilizar-lá, é necessário criar um arquuivo CSS, ou seja, criar um arquivo com a extensão 'css', no nosso exemplo, nosso arquivo CSS tem o nome de 'estilo.css'.

estilo.css:
h1{
    color: red;
}

Veja que nesse exemplo não foi necessário indicar que se trata de CSS utilizando a tag ou parâmetro 'style', já que, ele já está em um arquivo CSS. Nessa forma, a CSS altera a cor do para vermelho do conteúdo de qualquer tag 'h1' de qualquer arquivo HTML que esteja ligado ao arquivo CSS e desde que não tenha utilizado nenhuma das duas formas anteriores para alterar a cor da tag h1.

------------------------------/Cores\------------------------------
As cores no css podem ser representadas diversas forma, desde nome de cores até HSL.

Nome: para utilizar nome das cores como valor, basta escrever o nome em inglês da cor como valor na propriedade que permite cores, como a propriedade color. Exemplo
h1{
    color: blue;
}

Já para o hexadecimal é preciso indicar que você está usando hexadecimal. Exemplo:
h1{
    color: #ffffff; <- Cor branca
}
é possível alterar a transparência da cor passando mais dois dígitos ao hexadecimal. Exemplo
h1{
    color: #ffffff7c; <- Cor branca, com por volta de 50% de transparência
}

Para RBG, você também precisa indicar que está usando o RBG. Exemplo:
h1{
    color: rbg(0, 0, 0); <- Cor preta 
}
é possível passar mais um valor para o RGB, que é a transparência, ela vai 0 a 1, lembrando que como a lingaugem é desenvolvido na língua inglesa, eles utizam '.' para separar casas decimais. Exemplo:
h1{
    color: rbga(0, 0, 0, 0.5); <- Cor preta com 50% de transparência
}

Por fim, existe o HSL, novamente você precisa indicar que está usando HSL. Exemplo:
h1{
    color: hsl(0, 0%, 100%);
}
Assim como os dois anteriores, também é possível alterar a transparência da cor. Que vai de 0 a 1 também. Exemplo:
h1{
    color: hsl(0, 0%, 100%, 0.5);
}

------------------------------/Gradiente\------------------------------
Para utilizar o gradiente, você precisa obviamente ter no minímo duas cores, o formato e a direção (em alguns casos).Exemplo
h1{
    background: linear-gradient(45deg, #ffffff, #000000);
}
h1{
    background: radial-gradient(#e66465, #9198e5);
}
------------------------------/Fonte\------------------------------
https://www.w3.org/Style/Examples/007/fonts.en.html
O estudo da gráfia visa entender como pode ser criados letras que melhoram a leitura, para que cada 'Família' seja aplicado no contexto correto e da forma correta, assim, a fonte consegue passar as emoções que voçe deseja para o leitor. Por exemplo, quando você vai dar um alerta de aviso através da texto literário, uma fonte com a aparência mais séria é mais adequada do que uma fonte vista para crianças, como a 'Comic Sans'.

Este estudo da gráfia tem o nome de tipográfia, que vem do grego, tipo (Týpos, que siginifica imprimir, ato de colocar coisas no papel) e grafia (Graphía, que siginifica escrita), portanto significa como eu vou escrever coisas no papel

Anatomia das letras/glifo/caracteres
Medidas:
X <- O 'x' minúsculo é o ponto de partida para a criação da fonte
Altura x <- Define a altura base de todos as letras minúsculas baseado na altura do x, isso não inclui a parte ascendente da letra, por isso, ela podem 'vazar'
Ascendente <- altura que vaza acima da letra x
Descendente <- altura que vaza abaixo da letra x
Corpo <- Somas de todas as altura ou a altura da fonte
Altura da maiúsculas <- 
Corpo, geometria:
Serif <- São pequenas pontas que ficam nas extremidades das letras, elas servem para criar uma linha imaginária na nossa cabeça, afim de facilitar a leitura das linhas, normalmente são usadas em textos em onbjetos físicos (Livros, jornais e outros)

Termos
Fonte <- Conjunto de glifos
Família Tipográfica <- COnjunto de váriações da fonte

Categorias:
Serifada/Serif <- Posuem pontas nas extremidades
Não serifada/Sans-serif <- Não posuem pontas nas extremidades
Monoespaçada <- Todas as letras posuem a mesma largura
Cursiva <- Tenta imitar a escrita humana
Fantasia <- não segue as regras acima

Como obter as fontes
Instalado:
    Normalmente, os dispositivos já vem com fontes instaladas, para saber se a fonte já está instalada, você pode ir testando.

Local:
    A segunda forma é baixar a fonte e importa-lá no CSS, para isso, utilize a seguinte regra:
    @font-face{
        font-family: nomeQueVocêQuerDar; <- nome que você quer dar
        src: url('caminho do arquivo da fonte') format('nomeDoFormato'), url('caminho do arquivo da fonte de outro formato') format('nomeDoFormato'); <- caminho do arquivo da fonte e o formato
        font-weight: 400;  <- Peso padrão
        font-style: normal; <- estilo padrão
    }

Remoto:
    A terceira forma é utilizar uma fonte que está na internet (em outro local), você também precisa importa-lá, um ótimo site para importar fontes remotas, é o google font, mas lembre-se, caso o servidor da google que hospeda a fonte caia, seu site não irá conseguir utilizar aquele fonte e também para testa-lá você precisa ter intenet.
    Para utiliza-lá, use o import da seguinte forma:
    @import url('link');

Recomendação:
    Recomendo utilizar de forma remota, para que o usuário não tenha que baixar mais arquivos além do próprio site. Mas, recomendo importa a mesma fonte de mais de um site, para que caso um não funcione, o outro provavelmente funcionára.

Declarações das fontes:
font-family:; <- Serve para mudar a famiília da fonte, é recomendável passar mais de uma família e passar uma categoria relacionada a categoria da família que você quer (Isso de chama 'css web safe font combinations'), a virgula serve para separar os nomes. 

Isso para navegadores que podem não suportar a fonte que você passou, assim, ela vai tentar utilizar a primeira que você passsou, caso não consiga, vai ir para a segunda, assim por diante, até chegar na categoria, todo navegador possui uma fonte de cada categoria.
    Uma fonte: font-family: Arial;
    Duas fontes: font-family: Arial, Verdana;
    Duas fontes e uma categoria: font-family: Arial, Verdana, sans-serif;

font-size:; <- Serve para mudar o tamanho da fonte no dispositivo.
Existem dois tipos de medidas para o valor se basear na hora de calcular o tamanho, veja (https://www.w3.org/Style/Examples/007/units.pt_BR.html).
    Medidas absolutas: cm, mm, in, px, pt, pc
    Medidas relativas: em, ex, rem, vw, vh, %
    Recomendações da W3c: px, em, %
    Recomendação Guanabarra e W3C: em
    Exemplo: font-size: 16em;

font-weight:; <- serve para definir o peso da fonte, em uma tradução adequada para os brasileiros, seria equivalente a grossura dos caracteres. Ele possui um intervalo de 100 a 900, que alterna de 100 em 100, você também pode passar os nomes 'lighter' (100), normal (400), bold (700), bolder (?).

font-style:; <- Serve para passar definir o itálico, basta escrever 'italic'
    Exemplo: font-style: italic;

shorthand:
Ordem: font: style, weight, size, family;
Exempo: font: italic 600 1.5em Arial, sans-serif;

Alinhamento:
Antigamente, para centralizar um texto, utilizava-se a tag 'center', hoje em dia, isso é feito pela CSS. Nela, o alinhamento do texto possuem quatro tipos, a direita, a esquerda, centralizado e justificado, para isso, utilize a propriedade 'text-align'
    text-align: left; <- a esquerda (padrão)
    text-align: right; <- a direito
    text-align: center; <- centro
    text-align: justify; <- justificado

Identação:
    Caso você precise que o começo da primeira linha se afaste, use a propriedade:
    text-indent: 100px;

------------------------------/Seletores\------------------------------
id:
Caso você precise fazer formatações em uma tag específica, você pode utilizar o parâmetro 'id', com ele é possível determinar um nome único a uma tag para que você possa fazer alterações a ela.
    na tag: <p id="primeiroP">Isso é um paragrafo</p
    na CSS: #primeiroP{propriedades e valores}
id <- serve para definir um nome único para a tag
#nomeID <- o '#' serve para referenciar a tag nomeada

class:
Agora, se você precise alterar uma propriedade de várias tag's, você pode usar o seletor class, diferente do id que é recomendado você atribuir a apenas uma tag, o class é recomendado usar em várias tag's para altear propriedades em comum.
Arquivo HTML:
    <h1 class="titulo"></h1>
    <h2 class="titulo"></h2>
    <h3 class="titulo"></h4>
Arquivo CSS:
    .titulo{
        color: yellow;
    }

Se você precisa alterar propriedades de uma tag que compartilha o seletor class com outras tag's, você pode colocar o nome da tag na frente do class no CSS, veja exemplo:
Arquivo HTML:
    <h1 class="titulo"></h1>
    <h2 class="titulo"></h2>
    <h3 class="titulo"></h4>
Arquivo CSS:
    .titulo{
        color: yellow;
    }
    h2.titulo{
        font-style: italic;
    }
Assim, mesmo que h1 e h3 tenham a class "titulo", apenas o texto do h2 vai ficar em itálico, pois foi colocar 'h2' na frente de '.titulo' no css.
Um arquivo html pode ter mais de uma class e tbm uma tag tbm pode ter mais de uma class, eles são separados por virgula.
Arquivo HTML:
    <h1 class="titulo tituloh1"></h1>
    <h2 class="titulo"></h2>
    <h3 class="titulo"></h4>
Arquivo CSS:
    .titulo{
        color: yellow;
    }
    .tituloh1{
        background-color: black;
    }

pseudo-class:
As pseudo-classes tratam do estado em que um elemento está. Creio que o melhor exemplo para isso, seja o link. 
Imagine os seguinte cenários para o link de uma  página, por cima (quando o mouse está em cima), segurando o click (quando você aperta no link, mas não solta), clicado/visitado/aberto/ativado (quando você clicou e soltou).
A partir desses desses estados é possível alterar as propeiedades da tag com base em qual estado ele está. Para utilizar uma pseudo-classe, você deve usar o símbolo ':' depois de ter referência a tag.
Vamos supor que você quer mudar a cor do conteúdo das tag's 'a' (os links) de acordo com o seu estado, para o estado 'por cima' você quer que ele fique vermelho, para o 'segurando' você quer amarelo e para o cliclado você quer azul.
Arquivo HTML:
    <a href="link">GitHub</a>
    <a href="link">Instagram</a>
    <a href="link">Facebook</a>    
Arquivo CSS:
    Por cima (hover):
        a:hover{
            color: red;
        }
    Segurando (active):
        a:active{
            color: yellow; 
        }
    Visitado (visited):
        a:visited{
            color: blue;
        }
As pseudo classes possuem declarações que definem a como a mudança de estado deve se comportar:
transition-duration: 0.5s; <- define quanto tempo vai levar para sair de um estado e ir para outro 

    
Pseudo-elementos:
Os pseudo elementos, são elementos que não tem no código HTML, mas que são colocados visualmente através de código HTML. Ele é usado da mesma forma que os pseudo-classes, a diferença é que para utilizalos usa-se '::' ao invés de ':'.
Provavelmente os dois pseudo-elementos mais conhecidos são o 'before' e o 'after', pelo nome, você já deve imaginar o que eles fazem.
O before adiciona o conteúdo especificado antes do conteúdo da tag e o after adiciona o conteúdo especificado depois do conteudo da tag.
Vamos supor que você tenha uma site com mais de 1000 links, na frente desse links você quer colocar '[link]', se fosse manualmente, você teria que trocar dos mil e caso você precisasse trocar novamente, teria que trocar dos mil novamente, com o after você faria apaenaas com algumas linhas de código.
Arquivo HTML:
    <a href="urlN">Link N</a>
    <a href="urlN">Link N</a>
    <a href="urlN">Link N</a>
    ...

Arquivo CSS:
    a::after{
        content: '[Link]'; 
    }
Pronto, com apenas 4 linhas você adicionou '[Link]' em todos os links do site.


children:
Vamos supor um cenário mais específico, um que você precise colocar '[Link]' na frente das tag's 'a' que estão dentro de tag's div's diretamente, ou seja, não tem nada entre 'div' e 'a'.
É aí que entra o children, ele seleciona todas as tag's que são descedentes direto da tag específicada.
    Diretamente: <div><a></a></div>
    Indiretamente: <div><p><a></a></p></div>
Continuando o exemplo:
Arquivo HTML:
    <a></a>
    <div>
        <a></a>
        <p>
            <a></a>
            <a></a>
        </p>
        <a></a>
    </div>
    <a></a>

Arquivo CSS:
    div > a::after{
        content: '[Link]';
    }
Neste exemplo, veja que apenas as tag's 'a' das linhas 272 e 277 vão receber '[Link]', pois as tag's 'a' das linhas 270 e 279 não estão dentro da tag 'div', já as tag's 'a' da linhas 274 e 275 que estão dentro da tag 'p' que por sua vez está dentro da tag 'div' também não recebem, pois não são filhos diretos da tag 'div' assim como estão as tag's 'a' da linha 272 e 277.


------------------------------/Box Model\------------------------------
As tag's possuem um conceito chamado de box model, é nesta estrutura que é apresentado as tags do HTML no seu site, ele possui diversas caraterísitcas que compoem a box model, essas caraterísticas podem alteradas pela CSS para que você possa criar outros formatos ou deixar o seu site ao seu gosto.
Normalmente, elas são modificadas para que visualmente o site esteja em conforme com as regras do design gráfico.
Vou demonstrar as caraterísticas utilizando tag's, no entanto, isso é apenas demonstrativo, essas tag's não existem, elas são propriedades.
Características:            
            width (largura) 
         ----------------------------------------------------------
        |<margin (Margem/Espaçamento Externo)>
        |    <outline (Traçado)>
        |        <border (Borda)>
        |            <Padding (Preenchimento/Espaçamento Interno/)>
        |                <h1>
height  |                    Olá, mundo!
(Altura)|                </h1>
        |            </Padding>
        |        </border>
        |    </outline>
        |</margin>

Tipos:
box-level:
O tipo de caixa box-level sempre ocupa 100% da largura, ah não ser que você mude isso, por exemplo:
Arquivo HTML:
    <div>Algumas palavras</div>
    <div>O texto gigantesgo que poderia iniciar na linha de cima</div>
    <div>Poucas palavras que caberiam na linha de cima</div>

Mesmo que a primeira 'div' tenha pouco texto, o texto da segunda 'div' não continua no texto acima, pois as div's são do tipo box-level, ou seja, ela está ocupando 100% da largura, mesmo que seu conteúdo não esteja. O mesmo vale para a última div, mesmo que o conteúdo dela caiba na última linha do texto acima, ela não vai pra cima, por que ele ocupa 100% da largura
Outros box-level: h1 a h6, p, main, header, nav...

inline-level:
O tipo de caixa inline-level sempre ocupa a sua largura, ah não ser que você mude isso, por exemplo:
    <span>Muito texto</span>
    <span>Pouquissimo texto</span>
    <span>Muito texto</span>
Mesmo que o primeiro 'span' tenha muito texto, caso tenha espaço para o span debaixo caber, seja parcialmente ou totalmente, ele vai preencher, tbm vale para o terceiro span.
Outros inline-level: a, code, small, strong, em, sup, sub...

A propriedade que define se uma tag vai ser 'box-level' ou 'inline-level' é display, com ele é possível alterar tipo de display.

Os dois principais valaores é 'block' que refere-se ao box-level e o 'inline-block' refere-se ao inline-level. Exemplo:
a{
    display: block;
}
p{
    display: inline-block;
}

Vamos ver como se altera as propriedades do box, de fora para dentro, então començando pelo width (largura) e height (altura), os dois juntos é chamado de box sizing.
Arquivo HTML
    p{
        width: 300%; ou width: 50%;
        height: 300%; ou height: 50%;
    }

Agora vamos ver a margem, o nome da propriedade é parecido com o nome em português:
Arquivo HTML:
    p{
        margin-top: 10px;
        margin-right: 10px;
        margin-bottom: 40px;
        margin-left: 10px;
    }
    shorthand:
    p{
        /*margin: top right bottom left;*/
        margin: 10px 20px 30px 40px;
    }
    Se o lado de cima de baixo forem iguais e o lado esquerdo e direito forem iguais:
    p{
        /*margin: TopAndBottom RightAndLeft;*/
        margin: 10px 20px;
    }
    Se todo os lados forem iguais, você pode usar:
    p{
        margin: 10px;
    }
O valor 'auto' se comporta diferente baseado no  tipo de caixa:
    box-level: ocupa o máximo que der, ou seja, vai tentar preencher o máximo dee espaço possível
    inline-level: desoucupa o máximo que der, ou seja, vai tentar diminuir o máximo possível

 
Para o Outline, veja:
    p{
        outline-width: 10px; <- Espessura
        outline-style: solid; <- Formato do traçado
        outline-color: darkgreen; <- cor do traçado
    }
    shorthand:
    p{
        outline: 10px solid green;
    }

Para o border, veja:
    p{
        border-width: 10px; <- Espessura
        border-style: solid; <- Formato do traçado
        border-color: darkgreen; <- cor do traçado
    }
    shorthand:
    p{
        border: 10px solid green;
    }

Para o Padding, veja:
    p{
        padding-top: 10px;
        padding-right: 10px;
        padding-bottom: 40px;
        padding-left: 10px;
    }
    shorthand:
    p{
        /*padding: top right bottom left;*/
        padding: 10px 10px 40px 10px;
    }
    Se o lado de cima de baixo forem iguais e o lado esquerdo e direito forem iguais:
    p{
        /*padding: TopAndBottom RightAndLeft;*/
        padding: 10px 20px;
    }
    Se todo os lados forem iguais, você pode usar:
    p{
        padding: 10px;
    }

Para colocar sombras nas sua tags, você utiliza a propriedade box-shadow, você pode passar até 6 valores, sombra interna, deslocamento lateral, deslocamento vertical, borrão, espalhamento e cor.
p{
    /*box-shadow: SombraInterna DeslocamentoLateral DeslocamentoVertical Borrão Espalhamento Cor;*/
    box-shadow:;
    /*Sombra interna:*/ box-shadow: inset 3px 3px 5px 3px black;
    /*Sombra externa*/ box-shadow: 3px 3px 5px 3px black;
}

Já para o arredondamento de cantos, utiliza-se o border-radius, como possui quatro cantos, ele funciona no mesmo esquema do padding e margin.
p{
    background-color: black;
    border-top-right-radius: 10px;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    border-top-left-radius: 10px;
}
/*Cantos diferentes*/
P{
    border-radius: 10px 20px 30px 40px;
}
/*Superior esquerdo e inferior direito iguais e Superior direito e infeiror esquerdo iguais*/
P{
    border-radius: 10px 20px;
}
/*Cantos iguais*/
P{
    border-radius: 10px;
}
/*Para fazer círculos, use 50% ou mais*/
p{
    border-radius: 50%;
}

------------------------------/Grouping Tags\------------------------------
Existem tags que podem definir aproximar a estrtura de um site, deixando-o mais semântico, veja as princicpais:

hearder <- Normalmente onde fica o cabeçalho do site, onde pode ser colocado logo, menu, barra de pesquisa, nome do site e outros.
nav <- Onde ficam os links do menu, imagine nav como uma navegação dos principais links do site
main <- onde normalmente fica todo o conteúdo do site, informações, notícias, textos, artigos, títulos e etc
section <- Define seções para o site, também pode ser visto divisores
article <- utilizado para conteúdo independentes e autoexplicativos
aside <- utilizado para conteúdo referêncial, normalmente fica do lado direito do site
footer <- setia o rodapé do site, normalmente fica informações judiciais, autorais ou um menu de navegação mais extenso

------------------------------/Grouping Tags\------------------------------
Para facilitar o desenvolvimento e a manutenção dos estilos do site, as CSS possuem varíaveis, elas servem para que você altere facilmente as cores do seu site.
Mudando apenas as cores das varíaveis, é possível alterar o estilo de N sites, ao inves de ir linha a linha no arquivo CSS para alterar cada, então você cria variaveis das cores da sua paleta de cores, além do preto e branco.
Para as exceções, você cria variaveis também, assim também é possível altera-lás facilmente. As variaveis criadas ficam dentro de ':root', seria a 'raiz' do seu arquivo CSS, para declarar a variavel, utiliza-se '--' e depois o nome. Veja:
:root{
    /*1 Cores*/
    /*1.1 Paleta*/
    --cor1: rgb(a)/hexadecimal/hsl;
    --cor2: rgb(a)/hexadecimal/hsl;
    --cor3: rgb(a)/hexadecimal/hsl;
    /*1.2 Exceções*/
    --nomesite-partesite-conceitosite: rgb(a)/hexadecimal/hsl;
    --contato-rodape-fundo: rgb(a)/hexadecimal/hsl;
}

-----------/Declarações Gerais\-----------------
Caso seja necessário alterar propeiedades de todas as que possuem essas propriedades, você pode usar o seletar geral '*', através dele, qualquer tag que possuir as propriedades das declarações que você, vai rececber as alterações da propriredade.

Retirando a margem e espaçamento interno de todas as tag's:
*{
    margin: 0px;
    padding: 0px;
}

---------/Declarações Específicas\---------------
Existem declaraçõesque funcionam somente para algumas ou uma tag, como é caso da lista:
list-style-type: '\2714\00A0'; <- muda o símbolo dos itens da lista
list-style-position: inside; <- considera o símbolo dos itens como parte do conteúdo


Instagram Transformado:
Use shothands ao inves de quebrar a propriedade em várias propriedades
Use o padrão "Don't repeat yourself", se duas tags tem as mesmas propriedades, não as divida, escreva as propriedades apenas uma vez
Use fontes reservas, exemplo: p{font-family: Arial, sans-serif;}


Sites para treino:
    Codier
    Dev Mentor
    100 Days CSS
    FlexBox frogy


Resumo flex-blox:
https://www.instagram.com/p/CejymQxuSqf/?utm_source=ig_web_copy_link&igshid=MmJiY2I4NDBkZg==