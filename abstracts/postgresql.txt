wiki: https://wiki.postgresql.org/wiki/Main_Page
Tutoriais e recursos: https://www.postgresql.org/docs/online-resources/
Books: https://www.postgresql.org/docs/books/
FAQs:
    https://wiki.postgresql.org/wiki/Category:FAQ
    https://wiki.postgresql.org/wiki/Developer_FAQ
    https://wiki.postgresql.org/wiki/FAQ
    https://wiki.postgresql.org/wiki/Frequently_Asked_Questions
    https://wiki.postgresql.org/wiki/Todo
    

Outros:
    https://dsf.berkeley.edu/postgres.html

Referências:
    https://www.postgresql.org/docs/current/
        Bibliográfia da referência:
            https://www.postgresql.org/docs/current/biblio.html#STON86

psql: https://www.postgresql.org/docs/current/app-psql.html




--------/O que é o PostgreSQL?\---------
    Ele é um SGBD (DBMS) Objeto-Relacional (SGBDOR) (ORDBMS) baseado no BD (DB) Postgres

--------/Convenções\---------
    []      - Opcionais
    {} ou | - Deve escolher alternativa
    ...     - O elemento anterior pode ser repetido
    =>      - Símbolo pelo qual os comandos SQL são precedidos no prompt
    $       - Símbolo pelo qual os comandos SQL são precedidos no shell

--------/BUGs\---------
    Passo a Passo:
        Como fazer: https://www.postgresql.org/docs/current/bug-reporting.html

--------/Criar banco de dados\---------
    Shell: 
        createdb {nome_bd}
        createdb            - cria um banco de dados com o nome de usuário atual
        
--------/Remover/excluir/deletar banco de dados\---------
    Shell:
        dropdb {nomBD}

--------/Acessar banco de dados\---------
    Shell:
        psql {nomeBD}
--------/Comados\---------
    SELECT version();   - Mostra a versão do PostgreSQL e mais algumas informações
    mydb=> \h           - Ajuda
    mydb=> \q           - Sair
    \?                  - Mais comandos

--------/Criar Tabela\---------
    CREATE TABLE nome_tabela{
        -- Colunas:
        city varchar(80),
        temp_lo int,        -- low temperature
        temp_hi int,        -- high temperature
        prcp real,          -- precipitation
        date date
    };

--------/Comentários\---------
    -- - Permite comentário após --

--------/Tipos\---------
    int             - (Tipo Padrão do SQL) Tipo inteiro, aceita valores que não tem parte fracionária
    smallint        - (Tipo Padrão do SQL) O mesmo do tipo inteiro,só que aceita um intervalo menor de tempo
    real            - (Tipo Padrão do SQL) Ponto flutuante, aceita números com parte fracionária
    double precision- (Tipo Padrão do SQL)
    char()          - (Tipo Padrão do SQL) Texto com quantidade exata de characteres, não pode colocar menos nem mais
    varchar()       - (Tipo Padrão do SQL) 
    date            - (Tipo Padrão do SQL)
    time            - (Tipo Padrão do SQL)
    timestamp       - (Tipo Padrão do SQL)
    inteval         - (Tipo Padrão do SQL)
    point           - (Tipo do PostgreSQL)

--------/Remover/excluir/deletar tabela\---------
    DROP TABLE nomeTabelas;

--------/Inserindo dados\---------
    1ª Version: INSERT INTO nome_table (nome_coluna_1, nome-coluna_2) VALUES ('dado_colunas_tipo_texto', dado_colunas_do_tipo_numeros)
    2ª Version: INSERT INTO nome_table (nome_coluna_2, nome-coluna_1) VALUES (dado_colunas_do_tipo_numeros, 'dado_colunas_tipo_texto')
    3ª Version: INSERT INTO nome_table VALUES ('dado_colunas_tipo_texto', dado_colunas_do_tipo_numeros)

--------/Copiar dados do texto\---------
    COPY nome_tabela FROM 'src_arquivo/arquivo.txt';

--------/Consultara tabela\---------
--------/Selecionar/Extrair dados\---------
    *   - Abreviação para 'Todas as colunas'
    SELECT * FROM nome_table1, nome_tabela2;
    
--------/Expressões\---------
    SELECT cidade, (tem_hi + temp_lo) / 2 [AS nome_coluna], data FROM clima; 

--------/Consultando tabela com filtro\---------
    SELECT * FROM clima [WHERE cidade = 'San Francisco AND prcp > 0,0]; 

--------/Ordenar registros da consulta\---------
    SELECT * FROM clima [ORDER BY nome_coluna1[, nome_coluna2]];

--------/Linha 'duplicadas'\---------
    *Para o postgres tirar linha duplicadas, os registros precisam ser igual
    SELECT [DISTINCT] * FROM clima;

--------/Juntar consultas de tabelas\---------
    SELECT * FROM nome_tabela1 [JOIN nome_tabela2 ON cidade = nome];
    Resumido:
        SELECT *  FROM clima, cidades WHERE cidade = nome;
    Nomes de colunas iguais em diferentes tabelas:
    SELECT clima.city, clima.temp_lo, clima.temp_hi, clima.prcp, clima.date, cidades.location FROM clima JOIN cidades ON clima.city = cidades.name;
--------/Juntar consultas de tabelas a esquerda\---------
    Junta duas consultas e quando não houver dados a direita (segunda tabela mencionada) correpondente ao da esquerda (primeira tabela mencionada) ele retorna mesmo assim os dados do registro a esquerda
    SELECT * FROM clima LEFT OUTER JOIN cidade ON clima.city = cidade.name;

--------/Juntar consultas de tabelas a direita\---------
    O mesmo de left outer join só que ao contrário
    SELECT * FROM clima LEFT OUTER JOIN cidade ON clima.city = cidade.name;

--------/Juntar consultas de tabelas completas\---------
    É tipo uma junção de left outer join e right outer join, ele trará os dados independente se não houver conrespondências em ambos os lados

--------/Juntar consulta da mesma tabela\---------
    SELECIONE w1.city, w1.temp_lo AS baixo, w1.temp_hi AS alto, w2.city, w2.temp_lo AS baixo, w2.temp_hi AS alto FROM clima w1 JOIN clima w2 ON w1.temp_lo < w2.temp_lo AND w1.temp_hi > w2.temp_hi;

--------/Abreviação de nomes de tabelas (Aliases)\---------
    Você pode renomear tabelas para que elas sejam referências de forma mais rápda em uma consulta SQL
    SELECT * FROM weather w JOIN cities c ON w.city = c.name;

--------/Coonstraints/Restrições\---------
As retrições server para complementar as retrições de tipo de dados.

Check Constraints (Restrição de coluna):
    É utilizado par aceitar valores que resultam True ou Nulo (Verdadeiro) de uma expressão lógica. Exemplo:
    Syntax: 
        nome_coluna TIPO_DADO CHECK (expressão)
    Ou você pode nomear essa restrição
    Syntax: 
        nome_coluna TIPO_DADO CONSTRAINT [nome_restricao] CHECK (expressão)
    Caso você não defina um nome, o BD irá escolher
    CREATE TABLE produtos ( 
        price numeric CHECK (price > 0) 
    );
    Restrições que usam apenas 1 campo são restrições de coluna

Check Constraints (Restrição de tabela):
    CREATE TABLE produtos ( 
        preço numérico, 
        CHECK (preço > 0), 
        desconto_preço numérico, 
        CHECK (desconto_preço > 0), 
        CHECK (preço > desconto_preço) 
    );
    Restrições que usam mais de 1 campo são restrições de tabela
    Restrições de coluna podem ser escritas como restrições de tabela, mas não o contrario, pois restrições devem ser anexadas a apenas uma coluna. [1]

Not-Null Constraints:
    Especifica que as linhas de coluna não podem ser nulas, ela é sempre escrita como restrição de coluna
    Syntax:
         nome_coluna TIPO_DADO NOT NULL

Null Constraints (Padrão):
    Ela não especifica que uma deve ser nula e sim que PODE ser nula. Ela só foi adicionada para ser compátivel com outros SGBDs

Unique:
    Especifica que o valor deve ser exclusivo entre todas os os valores das linhas da coluna
    2 linhas com valores NULOS não são considerados iguais, ou seja, o UNIQUE deixa passar valores NULOS mesmo que tenha uma linha com esse valor. Isso pode resolvido com NULLS NOT DISTINCT, o contrário (padrão) NULLS DISTINCT
    Syntax:
        Em restrição de coluna:
            nome_coluna [CONSTRAINT nome_restricao] TIPO_DADO UNIQUE
        Em restrição de tabela:
            UNIQUE (nome_coluna1[, nome_coluna2, ...])

Primary Key:
    Indica que uma ou mais é um identificador exclusivo para asa linhas na tabela. É equivalente a UNIQUE com NOT NULL, mas não é idêntico, pois a restrição PRIMARY KEY faz mais coisas.
    Syntax:
        Em restrição de coluna (Uma coluna):
            product_no integer PRIMARY KEY,
        Em restrição de tabela (Uma ou mais colunas):
            PRIMARY KEY (nome_coluna1[, nome_coluna2, ...])

Foreign Key:
    Essa restrição diz que os valores das linhas da coluna devem fazer referência a valores de linhas da coluna de outra tabela
    Syntax:
        Em restrição de coluna (Uma coluna):
            fk_product_no integer REFERENCES products (product_no)
            ou
            fk_product_no integer REFERENCES products 
            porque na ausência de uma lista de colunas, a chave primária da tabela referenciada é usada como a(s) coluna(s) referenciada(s).
        Em restrição de tabela (Uma ou mais colunas):
            FOREIGN KEY (b, c) REFERENCES other_table (c1, c2)
    Assim, só é possível criar um resgirto em orders se houver no mínimo um registro em products e exista um valor corespondente de chave primária em products. Então products é a tabela referenciada e orders é a tabela referenciando.

Constraints On Delete
    Restrict
    Cascade
    No Action
    Set Null
    Set Default
Constraints On Update
    Restrict
    Cascade
    No Action

Exclude Constraints

--------/\---------
--------/\---------
Parei: https://www.postgresql.org/docs/current/ddl-system-columns.html



Dicas:
    Embora SELECT * seja útil para consultas improvisadas, é amplamente considerado um estilo ruim no código de produção, pois adicionar uma coluna à tabela alteraria os resultados. - https://www.postgresql.org/docs/current/tutorial-select.html
    É amplamente considerado um bom estilo qualificar todos os nomes de coluna em uma consulta de junção, para que a consulta não falhe se um nome de coluna duplicado for posteriormente adicionado a uma das tabelas. - https://www.postgresql.org/docs/current/tutorial-join.html
    Na maioria dos designs de banco de dados, a maioria das colunas deve ser marcada como não nula.
    A teoria do banco de dados relacional determina que toda tabela deve ter uma chave primária. Esta regra não é imposta pelo PostgreSQL , mas geralmente é melhor segui-la. - https://www.postgresql.org/docs/current/ddl-constraints.html
    [1] - O PostgreSQL não impõe essa regra, mas você deve segui-la se quiser que suas definições de tabela funcionem com outros sistemas de banco de dados.

Parei aqui: https://www.postgresql.org/docs/current/ddl-constraints.html


































































----------------/Tokens\--------------
Tokens = palavra-chave, identificador, identificador entre aspas, literal ou símbolos;
São separados por espaços, tabulções e/ou linhas.
token1 token2 tokken3 ...token4
Palavra-chave = select, update ou values
identificadores = my_table, my_database

----------------/Constantes\--------------
----------------/Comentários\--------------
--Este é um comentário SQL padrão
/* comentário de várias linhas 
 * com aninhamento: /* comentário de bloco aninhado */ 
 */

----------------/Expressões de valor\--------------
Coluna - correlation(nome_tabela).columnname
Parâmetros posicionais - CREATE FUNCTION dept(texto) RETURNS dept AS $$ SELECT * FROM dept WHERE nome = $1 $$ LANGUAGE SQL; - '$1' referência o primeiro parâmetro da função
Subscritos - ?
Seleção de campo - ?
Operadores - ?
Chamadas de função - ? 

----------------/Funções de chamada\--------------
Notação posicional - SELECT concat_lower_or_upper('Olá', 'Mundo', verdadeiro); 
Notação nomeada - SELECT concat_lower_or_upper(a => 'Olá', b => 'Mundo');  
Notação mista - SELECT concat_lower_or_upper('Olá', 'Mundo', maiúscula => verdadeiro); 
*A notação posicional não pode vir depois da notação nomeado, visto que ela depende da posição

----------------/Tabela\--------------
CREATE TABLE *nome_tabela*(
); - Criar tabela
DROP TABLE *nome_tabela*; - Apaga a tabela, caso não tenha tabela, dá erro
DROP TABLE IF EXISTS *nome_tabela*; - Apaga a tabela se existir, caso não tenha tabela, dá erro

----------------/Campo/Coluna/Atributo\--------------
/\SERIAL - Gera um valor númerico N+1 (Por padrão, começa em 0) e armazena naquela campo para o registro cadastrardo 


CREATE TABLE carro{
    
}
Ordem: 
1 - *nome_da_coluna*
2 - *tipo_de_dado_da_coluna* DEFAULT 3 
N > 2 - *valor_padrão_da_coluna*
N > 2 - *restrição*
----------------/Restrições\--------------
São condições que as colunas ou tabelas tem que atender para que algo seja feito
CHECK: Verificação - Atribui uma condição ao valor do campo, ex: 
CREATE TABLE products (
    price numeric CHECK (price > 0)
);

NOT NULL: não permite que a coluna seja nula, ex:
CREATE TABLE produtos ( 
    preço numérico NOT NULL CHECK (preço > 0) 
);

UNIQUE: garantem que os dados de cada linha da coluna em que foi específicada a restrição sejam exclusivos, valores nulos não se encaixam como únicos, ex:
Coluna:
CREATE TABLE produtos ( 
    product_no integer UNIQUE
);
Tabela:
CREATE TABLE produtos ( 
    preço numérico, UNIQUE (product_no) 
);
Abreviado:
exemplo CREATE TABLE ( 
    b inteiro, 
    c inteiro, UNIQUE (a, c) 
);

NULLS NOT DISTINCT: indica que valores nulos não são diferentes, ou seja, caso haja a cláusula UNIQUE, ela permitirá o cadastro de duas tuplas nulas, ex:
Coluna:
CREATE TABLE produtos ( 
    product_no integer UNIQUE NULLS NOT DISTINCT
);
Tabela:
CREATE TABLE produtos ( 
    product_no integer, 
    UNIQUE NULLS NOT DISTINCT (product_no) 
);

PRIMARY KEY: indica que N colunas pode ser usado como um identificador exclusivo para linhas na tabela, ou seja, PRIMARY KEY é semelhante a UNIQUE + NOT NULL com outros benefícios, ex:

SEMELHANTE:
CREATE TABLE produtos ( 
    product_no integer UNIQUE NOT NULL
);

Correto 1 Primary key: 
CREATE TABLE produtos ( 
    product_no integer PRIMARY KEY
);

Correto +1 Primary key
CREATE TABLE example (
    a integer,
    b integer,
    c integer,
    PRIMARY KEY (a, c)
);

FOREIGN KEY:

Referenciada: 
CREATE TABLE products (
    product_no integer PRIMARY KEY
);

Referenciando:
CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    product_no integer CONSTRAINT fk_id_products REFERENCES products (product_no)
);

Encurtado:
CREATE TABLE pedidos ( 
    order_id integer PRIMARY KEY, 
    product_no integer REFERENCES products 
);

2 Foreign Key:
CREATE TABLE t1 ( 
  a integer PRIMARY KEY, 
  b integer, 
  c integer, FOREIGN KEY (b, c) REFERENCES other_table (c1, c2) 
);

Self-referential Foreign key:
Ex:Se você quiser que as linhas de uma tabela representem os nós de uma estrutura de árvore, você pode escrever
CREATE TABLE tree ( 
    node_id integer PRIMARY KEY, 
    parent_id integer REFERENCES tree, 
    name text, 
    ... 
);

Muitos para Muitos:
CREATE TABLE products (
    product_no integer PRIMARY KEY,
    name text,
    price numeric
);

CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    shipping_address text,
    ...
);

CREATE TABLE order_items (
    product_no integer REFERENCES products,
    order_id integer REFERENCES orders,
    quantity integer,
    PRIMARY KEY (product_no, order_id)
);

ON DELETE RESTRICT
ON DELETE CASCADE
ON DELETE SET NULL
ON DELETE SET DEFAULT
ON DELETE NO ACTION

ON UPDATE RESTRICT
ON UPDATE CASCADE
ON UPDATE NO ACTION
MATCH FULL

EXCLUDE USING...

----------------/Renomear restrições\--------------
Esclarece as mensagens de erro e permite que você consulte a restrição quando precisar alterá-la, Se você não especificar um nome de restrição dessa maneira, o sistema escolherá um nome para você, ex:
CREATE TABLE products (
    price numeric CONSTRAINT *nome_separado* CHECK (price > 0)
);
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric,
    CHECK (price > 0),
    discounted_price numeric,
    CHECK (discounted_price > 0),
    CONSTRAINT valid_discount CHECK (price > discounted_price)
);

----------------/Restrição de outra coluna\--------------
CREATE TABLE products (
    price numeric CHECK (price > 0),
    discounted_price numeric CHECK (discounted_price > 0),
    CHECK (price > discounted_price)
);
ou
CREATE TABLE products (
    price numeric,
    CHECK (price > 0),
    discounted_price numeric,
    CHECK (discounted_price > 0),
    CHECK (price > discounted_price)
);
ou
CREATE TABLE products (
    price numeric,
    CHECK (price > 0),
    discounted_price numeric,
    CHECK (discounted_price > 0),
    CONSTRAINT valid_discount CHECK (price > discounted_price)
);


Dizemos que as duas primeiras restrições são restrições de coluna, enquanto a terceira é uma restrição de tabela porque é escrita separadamente de qualquer definição de coluna. As restrições de coluna também podem ser escritas como restrições de tabela, enquanto o inverso não é necessariamente possível, pois uma restrição de coluna deve se referir apenas à coluna à qual está anexada. ( O PostgreSQL não impõe essa regra, mas você deve segui-la se quiser que suas definições de tabela funcionem com outros sistemas de banco de dados.)


----------------/Campo/Coluna/Atributo Especiais\--------------
Uma coluna gerada é uma coluna especial que sempre é calculada a partir de outras colunas.  Armazenadas - Uma coluna gerada armazenada é computada quando é escrita (inserida ou atualizada) e ocupa o armazenamento como se fosse uma coluna normal.
Virtuais - Uma coluna virtual gerada não ocupa armazenamento e é computada quando é lida.
Assim, uma coluna virtual gerada é semelhante a uma visualização e uma coluna gerada armazenada é semelhante a uma visualização materializada (exceto pelo fato de ser sempre atualizada automaticamente).
Atualmente, o PostgreSQL implementa apenas colunas geradas armazenadas.

Comando: GENERATED ALWAYS AS (*calculo*) *TIPO*
TIPO = STORED ou ? 

Detalhes em: https://www.postgresql.org/docs/current/ddl-generated-columns.html

CREATE TABLE people (
    ...,
    height_cm numeric,
    height_in numeric GENERATED ALWAYS AS (height_cm / 2.54) STORED
);
---------------------------------------
                SPEEIA
---------------------------------------
Conveção
Palavras-chaves: MAIUSCULAS
identificadores: my_table/colunm

Ordem: 
1 - *nome_da_coluna*
2 - *tipo_de_dado_da_coluna* DEFAULT 3 
N > 2 - *valor_padrão_da_coluna*
N > 2 - *restrição*

product_no integer REFERENCES products (product_no)

"O SQL não diferencia maiúsculas de minúsculas em relação a palavras-chave e identificadores, exceto quando os identificadores são colocados entre aspas duplas para preservar a capitalização (não feito acima)." - https://www.postgresql.org/docs/current/tutorial-table.html

Uma convenção frequentemente usada é escrever palavras-chave em maiúsculas e nomes em minúsculas, por exemplo: - https://www.postgresql.org/docs/current/sql-syntax-lexical.html

Uma tabela pode ter no máximo uma chave primária. (Pode haver qualquer número de restrições exclusivas e não nulas, que são funcionalmente quase a mesma coisa, mas apenas uma pode ser identificada como a chave primária.) A teoria do banco de dados relacional determina que toda tabela deve ter uma chave primária. Esta regra não é imposta pelo PostgreSQL , mas geralmente é melhor segui-la. - https://www.postgresql.org/docs/current/ddl-constraints.html