Sumário detalhado: https://docs.djangoproject.com/en/4.2/contents/

Versões compátiveis: https://docs.djangoproject.com/pt-br/4.2/faq/install/#faq-python-version-support

Banco de dados: https://docs.djangoproject.com/pt-br/4.2/intro/install/
https://docs.djangoproject.com/en/4.2/topics/install/#database-installation
https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-DATABASES

Instalar: https://docs.djangoproject.com/en/4.2/topics/install/

Obs:
    Não utilize esse servidor em produçao
    Apesar do django reiniciar automáticamente o servidor quando o código é atualizado, ele não faz isso para novos arquivos

Projetos x Aplicativos
    Qual é a diferença entre um projeto e um aplicativo? Um aplicativo é um aplicativo da Web que faz alguma coisa – por exemplo, um sistema de blog, um banco de dados de registros públicos ou um pequeno aplicativo de pesquisa. Um projeto é uma coleção de configurações e aplicativos para um determinado site. Um projeto pode conter vários aplicativos. Um aplicativo pode estar em vários projetos.
    Usar " ou ', na documentação está usando ", já no projeto base é ', então utilize '

Possui:
    ORM - Object-Relational Mapper

Passo a passo:
    Recomendo instalar um Ambiente Virtual
        python -m venv nome-ambiente-virtual
    Ative o ambiente virtual para instalar o que for necessário
        nome-ambiente-virtual-criado\Scripts\activate
    Caso precise desligar a venv (provavelmente quando terminar de mexer)
        deactivate
    Instalar django
        python -m pip install Django
    Verificiar se o django foi instalado
        python -m django --version
    Criar projeto
        django-admin startproject name_project
    Roda o servidor na porta [0.0.0.0:][8080]
        python manage.py runserver
    Parar o servidor
        Ctrl + c
    Criar aplicativo
        python manage.py startapp name-app
    Para incluir a aplicação em nosso projeto, você deve informar o caminho de referência à classe de configuração da aplicação na configuração INSTALLED_APPS. Normalmente fica:
        name_app.apps.Name_appConfig


Estrutura criada
    O diretório raiz externo mysite/é um contêiner para seu projeto. Seu nome não importa para Django; você pode renomeá-lo para o que quiser.
    manage.py: Um utilitário de linha de comando que permite interagir com este projeto Django de várias maneiras. Você pode ler todos os detalhes sobre manage.py em https://docs.djangoproject.com/en/4.2/ref/django-admin/.
    O mysite/diretório interno é o pacote Python real para o seu projeto. Seu nome é o nome do pacote Python que você precisará usar para importar qualquer coisa dentro dele (por exemplo, mysite.urls).
    mysite/__init__.py: Um arquivo vazio que informa ao Python que esse diretório deve ser considerado um pacote Python. Se você é iniciante em Python, leia mais sobre pacotes nos documentos oficiais do Python https://docs.python.org/3/tutorial/modules.html#tut-packages.
    mysite/settings.py: Definições/configuração para este projeto Django. As configurações do Django lhe dirão tudo sobre como as configurações funcionam https://docs.djangoproject.com/en/4.2/topics/settings/.
    mysite/urls.py: As declarações de URL para este projeto Django; um “índice” do seu site desenvolvido com Django. Você pode ler mais sobre URLs em URL dispatcher https://docs.djangoproject.com/en/4.2/topics/http/urls/.
    mysite/asgi.py: Um ponto de entrada para servidores da Web compatíveis com ASGI para servir ao seu projeto. Consulte Como implantar com ASGI para obter mais detalhes https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/.
    mysite/wsgi.py: um ponto de entrada para servidores da Web compatíveis com WSGI para servir ao seu projeto. Consulte Como implantar com WSGI para obter mais detalhes https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/.

Padrão arquitetura
    View
    Model
    urls
        Para chamar views, precisamos mapear a URL e para mapear as URLs, precisamos de uma URLconf
        As urls precisam ser criadas nos aplicativos, para isso, crie 'urls.py' 
        Agora precisamos apontar a raiz da URLconf (Projeto/startproject) para os seus módulos (Aplicativo/startapp), para conseguir fazer isso, importe de django.urls.include e insira um include()
        Ele junta parâmetro 'root' da 'urls.py' do projeto e o parâmetro 'root' da 'urls.py' do aplicativo
        Aparentemente o parâmetro 'root' da 'urls.py' do aplicativo que em vazio, é considerado a página 'index'
        Caso tenha dois root vazios, o que aparecer primeiro de cima pra baixo é utilizado
        A função path permite que você passa um terceiro parâmetro chamado kwargs, ele deve ser um dicionário de palavras chaves
    admin
        Deve-se sempre usar include() quando você incluir outros padrões de URL. admin.site.urls é a única exceção a isso.
    time zone
        https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-TIME_ZONE
        https://en.wikipedia.org/wiki/List_of_tz_database_time_zones

Comandos
    python manage.py

Models
    Mapeia todos os seus modelos disponíveis e cria migrações para cada tabela que ainda não exista, normalmente utilizado para quando você atualiza seus modelos
        python manage.py makemigrations name_app
    Executa as migrações e cria as tabelas em seu banco de dados, o comando migrate executará apenas migrações para aplicativos em INSTALLED_APPS.
        python manage.py migrate
    Para ver qual SQL está migração vai rodar. 
        python manage.py sqlmigrate name_app number_migration
    Ele checa por problemas no seu projeto sem criar migrations ou tocar seu banco de dados.
        python manage.py

Templates
    Como funciona: utiliza o conceito de herança de templates
    Faz o que: primeiro carregue o template chamado ‘base’, o qual define uma série de blocos, e preencha os blocos com os seguintes blocos
    . - servem para acessar atributos, chaves de dicionários, índices e chamar funções
    {{}} - Ficam as váriaveis nos templates


Parei em: https://docs.djangoproject.com/pt-br/4.2/intro/tutorial02/