[] - Opcional
() - Obrigatório
<>
{}


O arduino

Entrada/Saída|I/O|On/Off
    pinMode(1, 2);: https://docs.arduino.cc/learn/microcontrollers/digital-pins#properties-of-pins-configured-as-input
        Descrição:
            Configura o pino como entrada, saída ou pullup
        Parâmetros:
            1 - Número do pino
            2 - Modo do pino
                Valores:
                    INPUT (Padrão) = Entrada
                    OUTPUT = Saída
                    INPUT_PULLUP
        Exemplo: pinMode(5, INPUT);
        Nota:
            Os pinos de entrada analógica podem ser usados ​​como pinos digitais, referidos como A0, A1, etc. 
            Exceções nos pinos dos Arduinos Nano, Pro Mini e A6 e A7 do Mini, que só podem ser usados ​​como entradas analógicas

    digitalWrite(1, 2);:
        Descrição:
            Libera ou barra a passagem de voltagem do pino
        Parâmetros:
            1 - Número do pino
            2 - Passagem/Barragem de voltagem
                Valores:
                    OUTPUT
                        HIGH = 5V (ou 3,3v quando é 3,3v)
                        LOW = 0V
                    INPUT
                        HIGH = Habilita o pullup interno no pino de entrada
                        LOW = Desabilita o pullup interno no pino de entrada
    
    digitalRead();:

Variáveis:
    Constantes: https://www.arduino.cc/reference/en/language/variables/constants/constants/
        Descrição:
            São palavras reservadas da linguagem Arduino que definem valores
        Níveis Lógicos|Booleanos:
            false ou == 0 = Define algo como falso
            true ou != 0 = Define algo verdadeiro
        Níveis dos Pinos:
            INPUT:
                digitalRead:
                    HIGH
                        Se a tensão for maior que 3V no pino em placas de 5V
                        Se a tensão for maior que 2V no pino em placas de 3,3V
                    LOW
                        Se a tensão for menor que 1,5V no pino em placas de 5V
                        Se a tensão for menor que 1V (aproximadamente) no pino em placas de 3,3V
                digitalWrite:
                    HIGH
                        Habilitará os resistores pull-up internos de 20K, que puxarão o pino de entrada para uma HIGHleitura, a menos que seja puxado LOWpor um circuito externo
                digitalRead:
            OUTPUT:
                digitalWrite:
                    HIGH
                        Fornece:
                            5V em placas de 5V
                            3,3 V em placas de 3,3V
                    LOW
                        Fornece: 0V
            INPUT_PULLUP:
                Habilitará os resistores pull-up internos de 20K, que puxarão o pino de entrada para uma HIGHleitura, a menos que seja puxado LOWpor um circuito externo
        Modos dos Pinos Digitais:
            INPUT:
                Eles ficam em um estado de alta impedância. Ou seja, fazem demandas extremamente pequenas no circuito que estão amostrando, equivalente a um resistor em série de 100 Megaohms na frente do pino

                Leia o artigo para mais informações sobre como usar um switch com resistores externos
            INPUT_PULLUP (Perigoso, pinos podem ser danificados ou destruídos):
                O microcontrolador ATmega no Arduino possui resistores pull-up internos (resistores que se conectam à energia internamente) que você pode acessar. Se preferir usá-los em vez de resistores pull-up externos, você pode usar o INPUT_PULLUPargumento em pinMode(). Se preferir usá-los em vez de resistores pull-up externos, você pode usar o INPUT_PULLUPargumento em pinMode().
                Tutorial:
                    https://docs.arduino.cc/built-in-examples/digital/InputPullupSerial
            OUTPUT:
                Eles ficam em um estado de baixa impedância. Isso significa que eles podem fornecer uma quantidade substancial de corrente para outros circuitos.
        LED_BUILTIN:
            LED_BUILTIN = é o número do pino qual o LED on-board está conectado, normalmente no 13 
        Ponto Flutuante:
            Declaração e inicialização:
                float nome_variável = 0.0000;
        Inteiro:
            Tipos:
                Decimal:
                    n = 123;
                Binário:
                    n = 0b...;
                    ... = numero_em_binario;
                Octal:
                    n = 0...;
                    ... = numero_em_octal;
                Hexadecimal:
                    0x...;
                    ... = numero_em_hexadecimal;
            Formatadores U & L:
                Para especificar uma constante inteira com outro tipo de dados, siga-a com:
                    um 'u' ou 'U' para forçar a constante em um formato de dados sem sinal. Exemplo: 33u
                    um 'l' ou 'L' para forçar a constante em um formato de dados longo. Exemplo: 100000L
                    um 'ul' ou 'UL' para forçar a constante em uma constante longa sem sinal. Exemplo: 32767ul
    Conversões:
        unsigned int
            Descrição: Converte um valor de qualquer tipo para unsigned int
            Syntax: (unsigned int)valor
            Retorna: unsigned int
        unsigned long
            Descrição: Converte um valor de qualquer tipo para unsigned long
            Syntax: (unsigned long)valor
            Retorna: unsigned long
        byte
            Descrição: Converte um valor de qualquer tipo para byte
            Syntax:
                byte(valor)
                (byte)valor - Estilo C
            Retorna: byte
        char
            Descrição: Converte um valor de qualquer tipo para char
            Syntax:
                char(valor)
                (char)valor - Estilo C
            Retorna: char
        float
            Descrição: Converte um valor de qualquer tipo para float
            Syntax:
                float(valor)
                (float)valor - Estilo C
            Retorna: float
        int
            Descrição: Converte um valor de qualquer tipo para int
            Syntax:
                int(valor)
                (int)valor - Estilo C
            Retorna: int
        long
            Descrição: Converte um valor de qualquer tipo para long
            Syntax:
                long(valor)
                (long)valor - Estilo C
            Retorna: long
        word
            Descrição: Converte um valor de qualquer tipo para word
            Syntax:
                word(valor)
                word(h, l)
                (word)valor - Estilo C
            Parâmetros:
                h = o byte de ordem superior (mais à esquerda) da palavra.
                l = o byte de ordem inferior (mais à direita) da palavra.
                Aqui fala sobre bit mais alto/baixo: https://www.arduino.cc/reference/en/language/variables/data-types/unsignedint/
            Retorna: word
    Utilidades
        sizeof: https://www.arduino.cc/reference/en/language/variables/utilities/sizeof/
            Descrição: Retorna o tamanho em bytes da variável (qualquer tipo) ou array
            Syntax: sizeof(variavel)
            Retorno: Número de bytes em size_t de uma variavel ou array
        PROGMEM
            https://www.arduino.cc/reference/en/language/variables/utilities/progmem/
    Escopos de variáveis e Qualifiers
        volatile: https://www.arduino.cc/reference/en/language/variables/variable-scope-qualifiers/volatile/
        static:
            A palavra-chave static é usada para criar variáveis ​​que são visíveis para apenas uma função. As variáveis ​​estáticas persistem além da chamada da função, preservando seus dados entre as chamadas da função, diferentes das variáveis normais. Elas só serão criadas e inicializadas na primeira vez que uma função for chamada.
            Syntax: static int place;
        scopo:
            Global: 
                Uma variável global é aquela que pode ser vista por todas as funções de um programa. As variáveis ​​locais são visíveis apenas para a função na qual são declaradas
            Local: 
                No ambiente Arduino, qualquer variável declarada fora de uma função (por exemplo setup(), loop(), etc. ), é uma variável global. Variáveis criadas dentro de funções, for só podem ser vistos por eles.
        const:
            É uma variável que seu valor não pode ser alterado, ou seja, é somente para leitura.
            Use #define ou const (preferível const) para constantes numéricas ou de string
            Use const para definir constantes numéricas, string ou matriz.
    Tipos de dados:
        bool
            Descrição: bool só permite dois valores (1 byte), true ou false
            Syntax: bool nome_variavel = valor;
        boolean
            Descrição: boolean é um alias de tipo não padrão bool definido pelo Arduino. É recomendável usar o tipo padrão bool, que é idêntico.
        byte
            Descrição: Um byte armazena um número sem sinal de 8 bits, de 0 a 255.
            Sintax: byte nome_variavel = valor;


        Terminar:
            https://www.arduino.cc/reference/en/language/variables/data-types/array/
            https://www.arduino.cc/reference/en/language/variables/data-types/char/
            https://www.arduino.cc/reference/en/language/variables/data-types/double/
            https://www.arduino.cc/reference/en/language/variables/data-types/float/
            https://www.arduino.cc/reference/en/language/variables/data-types/string/
            https://www.arduino.cc/reference/en/language/variables/data-types/stringobject/

        int
            Descrição: Arduino Uno (ou placas baseadas em ATmega), um int é 16 bits (2 bytes), ou seja, vai de -32.768 a 32.767 (-2^15 a 2^15 - 1). Arduino Due e SAMD, um int é 32 bits (4 bytes), ou seja, vai de  -2.147.483.648 a 2.147.483.647 (-2^31 a 2^31 - 1). Números negativos podem haver uma complicação inesperada ao lidar com o operador bitshift à direita (>>).
            Sintax: int nome_variavel = valor;
        long
            Descrição: São variáveis que armazenam até 32 bits/4 bytes, ou seja, vai de -2.147.483.648 a 2.147.483.647 (-2^31 a 2^31 - 1)
            Sintax: long nome_variavel = valor;
        short
            Descrição: São variáveis que armazenam até 16 bits/2 bytes, ou seja, vai de -32.768 a 32.767 (-2^15 a 2^15 - 1) (placas baseadas em ATMega e ARM)
            Sintax: short nome_variavel = valor;
        size_t
            Descrição: Representa o tamanho de qualquer objeto em bytes
            Sintax: size_t nome_variavel = valor;
            
        unsigned
            Por que usar variáveis ​​sem sinal?
                O comportamento de rollover é desejado, por exemplo, contadores
                A variável com sinal é um pouco pequena demais, mas você deseja evitar a perda de memória e velocidade de long/float.
            unsigned char
                Descrição: Um tipo de dado não assinado que ocupa 1 byte de memória. Igual ao byte tipo de dados. É preferível usa o byte.
                Sintax: unsigned char nome_variavel = valor;
            unsigned int
                Descrição: São variáveis sem sinal que armazenam até 16 bits/2 bytes, ou seja, vai de 0 a 65.535 (2^16 - 1) (No uno e placas baseadas em ATMEGA)
                No Due vai até 32 bits/4 bytes, ou seja, vai de 0 a 4.294.967.295 (2^32 - 1)
                Sintax: unsigned int nome_variavel = valor;
            unsigned long
                Descrição: São variáveis sem sinal que armazenam até 32 bits/4 bytes, ou seja, vai de 0 a 4.294.967.295 (2^32 - 1)
                Sintax: unsigned long nome_variavel = valor;
        void
            Descrição: é usada para definir funções que não vão ter nenhum retorno
            Sintax: void setup(){...}
        word
            Descrição: armazena um valor do tipo word
            Sintax: word nome_variavel = valor;

Estruturas
    Controle
        break
            É usado para sair da estruturas for, while, do...while e switch case.
        continue
            É usado para pular os comandos após ele na iteração autal de loop (for, while ou do..while).
        goto
            É instrução que manda o fluxo de execução para outro lugar, não recomendada o uso dessa instrução, pois pode acaretar em alguns problemas.
        return
            É uma instrução para as funções, ela retorna uma valor e encerra o restante da função.
    Condicional
        if
            É uma instrução que executa certos comandos de acordo com uma condição caso ela seja verdadeira.
            Qualquer número diferente de 0 é verdadeiro.
            elseif
                É uma instrução complementar do if, que funciona exatamente como o 'if', mas que está ligada ao if ou ifelse anterior a ele
            ele
                É uma outra instrução complementar do if, caso todas sa condições de falso, ele executa o else
        switch case
            é uma instrução do que compara e executa comandos, caso uma condição seja verrdadeira.
    Repetição
        while
            É uma estrutura de repetição que testa sua no ínicio da sua execução e executa depois, ele executa enquanto for verdadeiro 
        do...while
            É uma estrutura de repetição que testa sua condição no final da estrutura, ou seja, executa a primeira vez e testa nas restantes. Em teoria, é usado quando você não sabe o número de repetições.
        for
            É uma estrutura de repetição que testa sua condição e depois executa os comandos, a diferença do para o do...while e while, é que normalmente voçê sabe o número de repetições. 
